# -*- coding: utf-8 -*-
"""CO₂ Emissions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V0rkMsdugblE439nT8zOgSl-MclY4ent

## 1. Install Necessary Libraries

This cell ensures that all the required tools (libraries) for our project are installed. We need Streamlit for creating the web app, pandas for working with data, and matplotlib and seaborn for making charts.
"""

!pip install streamlit pandas matplotlib seaborn

"""## 2. Import Libraries and Load Data

In this section, we bring in the installed tools (libraries) so we can use them in our code. We also load the CO₂ emissions data from a public source on the internet. The data loading part is made efficient so it doesn't slow down the application.
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="Global C0₂ Emissions Dashboard", layout="wide")

@st.cache_data #Load cached to prevent download each time
def load_data():
  url = "https://github.com/owid/co2-data/raw/master/owid-co2-data.csv"
  df = pd.read_csv(url)
  return df

df = load_data()

"""## How to Save Your Notebook Code to a Python File

To run this Streamlit application, you need to save all the code cells from this notebook into a single Python file. Here's how you can do it in Google Colab:

1.  Go to the **File** menu at the top left of your Colab notebook.
2.  Select **Download**.
3.  Choose **Download .py**.

This will download a Python file (`.py`) containing all the code from your notebook. You can then use this file to run your Streamlit application from a terminal.

## 3. Create Sidebar Controls

This cell sets up the interactive elements on the side of our web application. These controls allow users to choose a country or region and select a range of years to view the data for.

## 4. Filter Data

This cell filters the main dataset based on the country and year range selected in the sidebar. This ensures that the charts and tables we create only show the data the user is interested in.
"""

# Filter the DataFrame based on selected country and year range.
df_filtered = df[(df["country"] == country) & (df["year"].between(year_range[0], year_range[1]))]

"""## 5. Display CO₂ Emissions Over Time

This cell displays the main title of the dashboard and generates a line chart showing the CO₂ emissions over time for the selected country or region. This chart helps visualize the trend of emissions historically.
"""

# Display the main title and the first chart.
st.title(f"C0₂ Emissions Dashboard for {country}")
st.subheader("C0₂ over time")

# Create and display a line plot for CO2 emissions over time.
fig, ax = plt.subplots(figsize=(8, 4))
sns.lineplot(data=df_filtered, x="year", y="co2", ax=ax, marker="o")
ax.set_xlabel("Year")
st.pyplot(fig)

"""## 6. Display Breakdown by Fuel Type

This cell conditionally displays a chart showing the breakdown of CO₂ emissions by different fuel types (coal, oil, gas, and other). This is only shown when a specific country (not "World") is selected, providing insight into the sources of emissions for that country.
"""

# If a specific country is selected (not "World"), show breakdown by fuel types.
if country != "World":
  st.subheader("Breakdown by fuel type")
  fig2, ax2 = plt.subplots(figsize=(8,4))
  fuel_cols = ["coal_co2", "oil_co2", "gas_co2", "other_co2"]
  for col in fuel_cols:
    if col in df_filtered.columns:
      sns.lineplot(data = df_filtered, x="year", y=col, ax=ax2, label=col)
  ax2.set_xlabel("Year")
  ax2.legend()
  st.pyplot(fig2)

"""## 7. Display Top Emitters

This cell conditionally displays a table showing the top 10 countries with the highest CO₂ emissions in the latest available year. This is shown when "World" is selected, providing a quick overview of the major global emitters.
"""

# If country is "World", show top 10 emitters for the latest year
if country == "World":
  st.subheader("Top emitters last year")
  latest_year_data = df[df["year"] == df["year"].max()].copy()
  # Ensure 'co2' column exists and is not all NaN for meaningful sorting
  if "co2" in latest_year_data.columns and not latest_year_data["co2"].isnull().all():
      top10 = latest_year_data.nlargest(10, "co2")[["country","co2"]]
      st.write(top10)
  else:
      st.write("CO2 data not available for the latest year.")

st.sidebar.title("Controls")

# Select a specific country or the entire world.
all_countries = sorted(df["country"].unique())
country = st.sidebar.selectbox("Choose country or region", all_countries, index=all_countries.index("World"))

min_year = int(df["year"].min())
max_year = int(df["year"].max())
year_range = st.sidebar.slider("Select year range", min_value=min_year, max_value=max_year, value=(min_year, max_year))

# Filter
df_filtered = df[(df["country"] == country) & (df["year"].between(year_range[0], year_range[1]))]

# Main: Title & Chart
st.title(f"C0₂ Emissions Dashboard for {country}")

st.subheader("C0₂ over time")

# Create figure and axes for the line plot
fig, ax = plt.subplots(figsize=(8, 4))

# Generate the line plot
sns.lineplot(data=df_filtered, x="year", y="co2", ax=ax, marker="o")

# Set x-axis label
ax.set_xlabel("Year")

# Display the plot
st.pyplot(fig)

if country != "World":
  st.subheader("Breakdown by fuel type")
  fig2, ax2 = plt.subplots(figsize=(8,4))
  fuel_cols = ["coal_co2", "oil_co2", "gas_co2", "other_co2"]
  for col in fuel_cols:
    if col in df_filtered.columns:
      sns.lineplot(data = df_filtered, x="year", y=col, ax=ax2, label=col)
  ax2.set_xlabel("Year")
  ax2.legend()
  st.pyplot(fig2)

# If country is "World", show top 10 emitters for the latest year
if country == "World":
  st.subheader("Top emitters last year")
  latest_year_data = df[df["year"] == df["year"].max()].copy()
  # Ensure 'co2' column exists and is not all NaN for meaningful sorting
  if "co2" in latest_year_data.columns and not latest_year_data["co2"].isnull().all():
      top10 = latest_year_data.nlargest(10, "co2")[["country","co2"]]
      st.write(top10)
  else:
      st.write("CO2 data not available for the latest year.")